name: Build and Test

on:
  push:
    branches: [ main, alpha, beta, release ]
  pull_request:
    branches: [ main, alpha, beta, release ]
  workflow_dispatch:

jobs:
  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Release, Debug]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build libcurl4-openssl-dev
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
        fi
    
    - name: Set compiler
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        else
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi
    
    - name: Configure Neutron
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX
    
    - name: Build Neutron
      run: cmake --build build --config ${{ matrix.build_type }} -j $(nproc)
    
    - name: Configure Box
      run: |
        cd nt-box
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX
    
    - name: Build Box
      run: |
        cd nt-box
        cmake --build build --config ${{ matrix.build_type }} -j $(nproc)
    
    - name: Run tests
      run: |
        chmod +x run_tests.sh
        ./run_tests.sh
    
    - name: Prepare artifacts
      if: matrix.build_type == 'Release'
      run: |
        # Create clean artifact structure
        ARTIFACT_DIR="neutron-linux-${{ matrix.compiler }}-x64"
        mkdir -p $ARTIFACT_DIR/bin
        mkdir -p $ARTIFACT_DIR/lib
        mkdir -p $ARTIFACT_DIR/include/neutron
        mkdir -p $ARTIFACT_DIR/docs
        
        # Copy binaries
        cp build/neutron $ARTIFACT_DIR/bin/
        cp nt-box/build/box $ARTIFACT_DIR/bin/
        
        # Copy runtime library if it exists
        if [ -f build/libneutron_runtime.a ]; then
          cp build/libneutron_runtime.a $ARTIFACT_DIR/lib/
        fi
        if [ -f build/libneutron_runtime.so ]; then
          cp build/libneutron_runtime.so $ARTIFACT_DIR/lib/
        fi
        
        # Copy standard library
        if [ -d lib ]; then
          cp lib/*.nt $ARTIFACT_DIR/lib/ 2>/dev/null || true
        fi
        
        # Copy headers
        if [ -d include ]; then
          cp -r include/* $ARTIFACT_DIR/include/neutron/ 2>/dev/null || true
        fi
        
        # Copy documentation
        cp README.md LICENSE CHANGELOG.md $ARTIFACT_DIR/docs/ 2>/dev/null || true
        if [ -d docs ]; then
          cp docs/*.md $ARTIFACT_DIR/docs/ 2>/dev/null || true
        fi
        
        # Create installation script
        cat > $ARTIFACT_DIR/install.sh << 'EOFLINUX'
#!/bin/bash
# Neutron Installation Script for Linux

set -e

PREFIX="${PREFIX:-/usr/local}"
echo "Installing Neutron to $PREFIX"

# Check for root privileges
if [ "$EUID" -ne 0 ] && [ "$PREFIX" = "/usr/local" ]; then 
    echo "Please run with sudo or set PREFIX environment variable"
    exit 1
fi

# Create directories
mkdir -p "$PREFIX/bin"
mkdir -p "$PREFIX/lib/neutron"
mkdir -p "$PREFIX/include/neutron"
mkdir -p "$PREFIX/share/doc/neutron"

# Install binaries
echo "Installing binaries..."
install -m 755 bin/neutron "$PREFIX/bin/"
install -m 755 bin/box "$PREFIX/bin/"

# Install libraries
echo "Installing libraries..."
if [ -d lib ]; then
    cp lib/*.nt "$PREFIX/lib/neutron/" 2>/dev/null || true
    cp lib/*.a "$PREFIX/lib/" 2>/dev/null || true
    cp lib/*.so "$PREFIX/lib/" 2>/dev/null || true
fi

# Install headers
echo "Installing headers..."
if [ -d include/neutron ]; then
    cp -r include/neutron/* "$PREFIX/include/neutron/"
fi

# Install documentation
echo "Installing documentation..."
if [ -d docs ]; then
    cp docs/* "$PREFIX/share/doc/neutron/" 2>/dev/null || true
fi

echo ""
echo "✓ Installation complete!"
echo ""
echo "Neutron installed to: $PREFIX/bin/neutron"
echo "Box installed to: $PREFIX/bin/box"
echo ""
echo "Verify installation:"
echo "  neutron --version"
echo "  box --help"
EOFLINUX
        chmod +x $ARTIFACT_DIR/install.sh
        
        echo "Artifact contents:"
        find $ARTIFACT_DIR -type f
    
    - name: Upload artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: neutron-linux-${{ matrix.compiler }}-x64
        path: neutron-linux-${{ matrix.compiler }}-x64/
        retention-days: 7

  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [Release, Debug]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        brew install cmake ninja curl
    
    - name: Configure Neutron
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build Neutron
      run: cmake --build build --config ${{ matrix.build_type }} -j $(sysctl -n hw.ncpu)
    
    - name: Configure Box
      run: |
        cd nt-box
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build Box
      run: |
        cd nt-box
        cmake --build build --config ${{ matrix.build_type }} -j $(sysctl -n hw.ncpu)
    
    - name: Run tests
      run: |
        chmod +x run_tests.sh
        ./run_tests.sh
    
    - name: Prepare artifacts
      if: matrix.build_type == 'Release'
      run: |
        # Create clean artifact structure
        ARTIFACT_DIR="neutron-macos-x64"
        mkdir -p $ARTIFACT_DIR/bin
        mkdir -p $ARTIFACT_DIR/lib
        mkdir -p $ARTIFACT_DIR/include/neutron
        mkdir -p $ARTIFACT_DIR/docs
        
        # Copy binaries
        cp build/neutron $ARTIFACT_DIR/bin/
        cp nt-box/build/box $ARTIFACT_DIR/bin/
        
        # Copy runtime library if it exists
        if [ -f build/libneutron_runtime.a ]; then
          cp build/libneutron_runtime.a $ARTIFACT_DIR/lib/
        fi
        if [ -f build/libneutron_runtime.dylib ]; then
          cp build/libneutron_runtime.dylib $ARTIFACT_DIR/lib/
        fi
        
        # Copy standard library
        if [ -d lib ]; then
          cp lib/*.nt $ARTIFACT_DIR/lib/ 2>/dev/null || true
        fi
        
        # Copy headers
        if [ -d include ]; then
          cp -r include/* $ARTIFACT_DIR/include/neutron/ 2>/dev/null || true
        fi
        
        # Copy documentation
        cp README.md LICENSE CHANGELOG.md $ARTIFACT_DIR/docs/ 2>/dev/null || true
        if [ -d docs ]; then
          cp docs/*.md $ARTIFACT_DIR/docs/ 2>/dev/null || true
        fi
        
        # Create installation script
        cat > $ARTIFACT_DIR/install.sh << 'EOFMACOS'
#!/bin/bash
# Neutron Installation Script for macOS

set -e

PREFIX="${PREFIX:-/usr/local}"
echo "Installing Neutron to $PREFIX"

# Check for root privileges if installing to system directory
if [ "$EUID" -ne 0 ] && [ "$PREFIX" = "/usr/local" ]; then 
    echo "Please run with sudo or set PREFIX environment variable"
    exit 1
fi

# Create directories
mkdir -p "$PREFIX/bin"
mkdir -p "$PREFIX/lib/neutron"
mkdir -p "$PREFIX/include/neutron"
mkdir -p "$PREFIX/share/doc/neutron"

# Install binaries
echo "Installing binaries..."
install -m 755 bin/neutron "$PREFIX/bin/"
install -m 755 bin/box "$PREFIX/bin/"

# Install libraries
echo "Installing libraries..."
if [ -d lib ]; then
    cp lib/*.nt "$PREFIX/lib/neutron/" 2>/dev/null || true
    cp lib/*.a "$PREFIX/lib/" 2>/dev/null || true
    cp lib/*.dylib "$PREFIX/lib/" 2>/dev/null || true
fi

# Install headers
echo "Installing headers..."
if [ -d include/neutron ]; then
    cp -r include/neutron/* "$PREFIX/include/neutron/"
fi

# Install documentation
echo "Installing documentation..."
if [ -d docs ]; then
    cp docs/* "$PREFIX/share/doc/neutron/" 2>/dev/null || true
fi

echo ""
echo "✓ Installation complete!"
echo ""
echo "Neutron installed to: $PREFIX/bin/neutron"
echo "Box installed to: $PREFIX/bin/box"
echo ""
echo "Verify installation:"
echo "  neutron --version"
echo "  box --help"
EOFMACOS
        chmod +x $ARTIFACT_DIR/install.sh
        
        echo "Artifact contents:"
        find $ARTIFACT_DIR -type f
    
    - name: Upload artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: neutron-macos-x64
        path: neutron-macos-x64/
        retention-days: 7

  build-windows-msvc:
    name: Build on Windows (MSVC)
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Release, Debug]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
    
    - name: Install CMake
      uses: lukka/get-cmake@latest
    
    - name: Configure Neutron
      run: |
        cmake -B build -G "Visual Studio 17 2022" -A x64
    
    - name: Build Neutron
      run: |
        cmake --build build --config ${{ matrix.build_type }} -j $env:NUMBER_OF_PROCESSORS
    
    - name: Configure Box
      run: |
        cd nt-box
        cmake -B build -G "Visual Studio 17 2022" -A x64
    
    - name: Build Box
      run: |
        cd nt-box
        cmake --build build --config ${{ matrix.build_type }} -j $env:NUMBER_OF_PROCESSORS
    
    - name: Run tests
      run: |
        .\run_tests.ps1
    
    - name: Prepare artifacts
      if: matrix.build_type == 'Release'
      run: |
        # Create clean artifact structure
        $ARTIFACT_DIR = "neutron-windows-msvc-x64"
        New-Item -ItemType Directory -Force -Path "$ARTIFACT_DIR/bin"
        New-Item -ItemType Directory -Force -Path "$ARTIFACT_DIR/lib"
        New-Item -ItemType Directory -Force -Path "$ARTIFACT_DIR/include/neutron"
        New-Item -ItemType Directory -Force -Path "$ARTIFACT_DIR/docs"
        
        # Copy binaries
        Copy-Item "build/${{ matrix.build_type }}/neutron.exe" "$ARTIFACT_DIR/bin/"
        Copy-Item "nt-box/build/${{ matrix.build_type }}/box.exe" "$ARTIFACT_DIR/bin/"
        
        # Copy runtime library if it exists
        if (Test-Path "build/${{ matrix.build_type }}/neutron_runtime.lib") {
          Copy-Item "build/${{ matrix.build_type }}/neutron_runtime.lib" "$ARTIFACT_DIR/lib/"
        }
        if (Test-Path "build/${{ matrix.build_type }}/neutron_runtime.dll") {
          Copy-Item "build/${{ matrix.build_type }}/neutron_runtime.dll" "$ARTIFACT_DIR/lib/"
        }
        
        # Copy standard library
        if (Test-Path lib) {
          Get-ChildItem lib/*.nt | Copy-Item -Destination "$ARTIFACT_DIR/lib/" -ErrorAction SilentlyContinue
        }
        
        # Copy headers
        if (Test-Path include) {
          Copy-Item -Recurse include/* "$ARTIFACT_DIR/include/neutron/" -ErrorAction SilentlyContinue
        }
        
        # Copy documentation
        Copy-Item README.md,LICENSE,CHANGELOG.md "$ARTIFACT_DIR/docs/" -ErrorAction SilentlyContinue
        if (Test-Path docs) {
          Get-ChildItem docs/*.md | Copy-Item -Destination "$ARTIFACT_DIR/docs/" -ErrorAction SilentlyContinue
        }
        
        # Create installation batch script
        @'
@echo off
REM Neutron Installation Script for Windows

setlocal

set "INSTALL_DIR=%ProgramFiles%\Neutron"
if not "%1"=="" set "INSTALL_DIR=%~1"

echo Installing Neutron to %INSTALL_DIR%
echo.

REM Check for admin privileges
net session >nul 2>&1
if %errorLevel% neq 0 (
    echo Error: This script requires administrator privileges.
    echo Right-click and select "Run as administrator"
    pause
    exit /b 1
)

REM Create directories
if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"
if not exist "%INSTALL_DIR%\bin" mkdir "%INSTALL_DIR%\bin"
if not exist "%INSTALL_DIR%\lib" mkdir "%INSTALL_DIR%\lib"
if not exist "%INSTALL_DIR%\include" mkdir "%INSTALL_DIR%\include"
if not exist "%INSTALL_DIR%\docs" mkdir "%INSTALL_DIR%\docs"

REM Copy files
echo Installing binaries...
copy /Y bin\neutron.exe "%INSTALL_DIR%\bin\" >nul
copy /Y bin\box.exe "%INSTALL_DIR%\bin\" >nul

echo Installing libraries...
if exist lib\*.nt copy /Y lib\*.nt "%INSTALL_DIR%\lib\" >nul
if exist lib\*.lib copy /Y lib\*.lib "%INSTALL_DIR%\lib\" >nul
if exist lib\*.dll copy /Y lib\*.dll "%INSTALL_DIR%\lib\" >nul

echo Installing headers...
if exist include\neutron xcopy /E /I /Y include\neutron "%INSTALL_DIR%\include\neutron" >nul

echo Installing documentation...
if exist docs xcopy /Y docs\*.md "%INSTALL_DIR%\docs\" >nul

REM Add to PATH
echo Adding to PATH...
setx /M PATH "%PATH%;%INSTALL_DIR%\bin" >nul 2>&1

echo.
echo ======================================
echo   Installation complete!
echo ======================================
echo.
echo Neutron installed to: %INSTALL_DIR%\bin\neutron.exe
echo Box installed to: %INSTALL_DIR%\bin\box.exe
echo.
echo Please restart your terminal or command prompt.
echo.
echo Verify installation:
echo   neutron --version
echo   box --help
echo.
pause
'@ | Out-File -FilePath "$ARTIFACT_DIR/install.bat" -Encoding ASCII
        
        Write-Host "Artifact contents:"
        Get-ChildItem -Recurse $ARTIFACT_DIR | Select-Object FullName
    
    - name: Upload artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: neutron-windows-msvc-x64
        path: neutron-windows-msvc-x64/
        retention-days: 7

  build-windows-mingw:
    name: Build on Windows (MINGW64)
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Release, Debug]
    defaults:
      run:
        shell: msys2 {0}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          make
    
    - name: Configure Neutron
      run: |
        cmake -B build -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build Neutron
      run: |
        cmake --build build --config ${{ matrix.build_type }} -j $(nproc)
    
    - name: Configure Box
      run: |
        cd nt-box
        cmake -B build -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build Box
      run: |
        cd nt-box
        cmake --build build --config ${{ matrix.build_type }} -j $(nproc)
    
    - name: Prepare artifacts with MINGW64 DLLs
      if: matrix.build_type == 'Release'
      run: |
        # Create clean artifact structure
        ARTIFACT_DIR="neutron-windows-mingw64-x64"
        mkdir -p $ARTIFACT_DIR/bin
        mkdir -p $ARTIFACT_DIR/lib
        mkdir -p $ARTIFACT_DIR/include/neutron
        mkdir -p $ARTIFACT_DIR/docs
        
        # Copy binaries
        cp build/neutron.exe $ARTIFACT_DIR/bin/
        cp nt-box/build/box.exe $ARTIFACT_DIR/bin/
        
        # Copy runtime library if it exists
        if [ -f build/libneutron_runtime.a ]; then
          cp build/libneutron_runtime.a $ARTIFACT_DIR/lib/
        fi
        if [ -f build/libneutron_runtime.dll ]; then
          cp build/libneutron_runtime.dll $ARTIFACT_DIR/lib/
        fi
        
        # Copy MINGW64 runtime DLLs
        echo "Copying MINGW64 runtime DLLs..."
        MINGW_BIN="/mingw64/bin"
        
        # Required DLLs for C++ programs
        cp $MINGW_BIN/libgcc_s_seh-1.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        cp $MINGW_BIN/libstdc++-6.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        cp $MINGW_BIN/libwinpthread-1.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        
        # CURL DLLs if used
        cp $MINGW_BIN/libcurl-4.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        cp $MINGW_BIN/zlib1.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        cp $MINGW_BIN/libidn2-0.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        cp $MINGW_BIN/libunistring-5.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        cp $MINGW_BIN/libiconv-2.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        cp $MINGW_BIN/libintl-8.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        cp $MINGW_BIN/libpsl-5.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        cp $MINGW_BIN/libssh2-1.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        cp $MINGW_BIN/libnghttp2-14.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        cp $MINGW_BIN/libssl-3-x64.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        cp $MINGW_BIN/libcrypto-3-x64.dll $ARTIFACT_DIR/bin/ 2>/dev/null || true
        
        # List copied DLLs
        echo "Copied DLLs:"
        ls -lh $ARTIFACT_DIR/bin/*.dll
        
        # Copy standard library
        if [ -d lib ]; then
          cp lib/*.nt $ARTIFACT_DIR/lib/ 2>/dev/null || true
        fi
        
        # Copy headers
        if [ -d include ]; then
          cp -r include/* $ARTIFACT_DIR/include/neutron/ 2>/dev/null || true
        fi
        
        # Copy documentation
        cp README.md LICENSE CHANGELOG.md $ARTIFACT_DIR/docs/ 2>/dev/null || true
        if [ -d docs ]; then
          cp docs/*.md $ARTIFACT_DIR/docs/ 2>/dev/null || true
        fi
        
        # Create README for DLLs
        cat > $ARTIFACT_DIR/bin/README_DLLS.txt << 'EOFDLLS'
MINGW64 Runtime DLLs
====================

This directory contains the MINGW64 runtime DLLs required to run
Neutron and Box on Windows without MSYS2 installed.

Required DLLs:
- libgcc_s_seh-1.dll      : GCC runtime
- libstdc++-6.dll         : C++ standard library
- libwinpthread-1.dll     : POSIX threads
- libcurl-4.dll           : CURL library (for HTTP module)
- Additional SSL/crypto DLLs for HTTPS support

These DLLs are from the MINGW64 project and are licensed under
their respective licenses (GPL, LGPL, etc.).

For more information: https://www.mingw-w64.org/
EOFDLLS
        
        # Create installation batch script
        cat > $ARTIFACT_DIR/install.bat << 'EOFBAT'
@echo off
REM Neutron Installation Script for Windows (MINGW64 build)

setlocal

set "INSTALL_DIR=%ProgramFiles%\Neutron"
if not "%1"=="" set "INSTALL_DIR=%~1"

echo Installing Neutron (MINGW64 build) to %INSTALL_DIR%
echo.

REM Check for admin privileges
net session >nul 2>&1
if %errorLevel% neq 0 (
    echo Error: This script requires administrator privileges.
    echo Right-click and select "Run as administrator"
    pause
    exit /b 1
)

REM Create directories
if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"
if not exist "%INSTALL_DIR%\bin" mkdir "%INSTALL_DIR%\bin"
if not exist "%INSTALL_DIR%\lib" mkdir "%INSTALL_DIR%\lib"
if not exist "%INSTALL_DIR%\include" mkdir "%INSTALL_DIR%\include"
if not exist "%INSTALL_DIR%\docs" mkdir "%INSTALL_DIR%\docs"

REM Copy files
echo Installing binaries...
copy /Y bin\neutron.exe "%INSTALL_DIR%\bin\" >nul
copy /Y bin\box.exe "%INSTALL_DIR%\bin\" >nul

echo Installing MINGW64 runtime DLLs...
copy /Y bin\*.dll "%INSTALL_DIR%\bin\" >nul
copy /Y bin\README_DLLS.txt "%INSTALL_DIR%\bin\" >nul

echo Installing libraries...
if exist lib\*.nt copy /Y lib\*.nt "%INSTALL_DIR%\lib\" >nul
if exist lib\*.a copy /Y lib\*.a "%INSTALL_DIR%\lib\" >nul

echo Installing headers...
if exist include\neutron xcopy /E /I /Y include\neutron "%INSTALL_DIR%\include\neutron" >nul

echo Installing documentation...
if exist docs xcopy /Y docs\*.md "%INSTALL_DIR%\docs\" >nul

REM Add to PATH
echo Adding to PATH...
setx /M PATH "%PATH%;%INSTALL_DIR%\bin" >nul 2>&1

echo.
echo ======================================
echo   Installation complete!
echo ======================================
echo.
echo Neutron installed to: %INSTALL_DIR%\bin\neutron.exe
echo Box installed to: %INSTALL_DIR%\bin\box.exe
echo MINGW64 DLLs included (no MSYS2 required)
echo.
echo Please restart your terminal or command prompt.
echo.
echo Verify installation:
echo   neutron --version
echo   box --help
echo.
pause
EOFBAT
        
        echo "Artifact contents:"
        find $ARTIFACT_DIR -type f
    
    - name: Upload artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: neutron-windows-mingw64-x64
        path: neutron-windows-mingw64-x64/
        retention-days: 7

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format cppcheck
    
    - name: Check formatting (clang-format)
      run: |
        find src include nt-box/src nt-box/include -name "*.cpp" -o -name "*.h" | \
        xargs clang-format --dry-run --Werror
      continue-on-error: true
    
    - name: Static analysis (cppcheck)
      run: |
        cppcheck --enable=warning,style,performance,portability \
                 --error-exitcode=0 \
                 --inline-suppr \
                 -I include -I nt-box/include \
                 src/ nt-box/src/
      continue-on-error: true

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake lcov
    
    - name: Configure with coverage
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_CXX_FLAGS="--coverage" \
              -DCMAKE_C_FLAGS="--coverage"
    
    - name: Build
      run: cmake --build build -j $(nproc)
    
    - name: Run tests
      run: |
        chmod +x run_tests.sh
        ./run_tests.sh
    
    - name: Generate coverage report
      run: |
        lcov --directory build --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info
      continue-on-error: true

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows-msvc, build-windows-mingw]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.build-linux.result }}" != "success" ] || \
           [ "${{ needs.build-macos.result }}" != "success" ] || \
           [ "${{ needs.build-windows-msvc.result }}" != "success" ] || \
           [ "${{ needs.build-windows-mingw.result }}" != "success" ]; then
          echo "One or more builds failed"
          exit 1
        fi
        echo "All builds successful!"
