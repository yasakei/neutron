name: Build and Test

on:
  push:
    branches: [ main, alpha, beta, release ]
  pull_request:
    branches: [ main, alpha, beta, release ]
  workflow_dispatch:

jobs:
  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Release, Debug]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
        fi
    
    - name: Set compiler
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        else
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi
    
    - name: Configure Neutron
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX
    
    - name: Build Neutron
      run: cmake --build build --config ${{ matrix.build_type }} -j $(nproc)
    
    - name: Configure Box
      run: |
        cd nt-box
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX
    
    - name: Build Box
      run: |
        cd nt-box
        cmake --build build --config ${{ matrix.build_type }} -j $(nproc)
    
    - name: Run tests
      run: |
        chmod +x run_tests.sh
        ./run_tests.sh
    
    - name: Upload artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: neutron-linux-${{ matrix.compiler }}
        path: |
          build/neutron
          nt-box/build/box
        retention-days: 7

  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [Release, Debug]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        brew install cmake ninja
    
    - name: Configure Neutron
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build Neutron
      run: cmake --build build --config ${{ matrix.build_type }} -j $(sysctl -n hw.ncpu)
    
    - name: Configure Box
      run: |
        cd nt-box
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build Box
      run: |
        cd nt-box
        cmake --build build --config ${{ matrix.build_type }} -j $(sysctl -n hw.ncpu)
    
    - name: Run tests
      run: |
        chmod +x run_tests.sh
        ./run_tests.sh
    
    - name: Upload artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: neutron-macos
        path: |
          build/neutron
          nt-box/build/box
        retention-days: 7

  build-windows-msvc:
    name: Build on Windows (MSVC)
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Release, Debug]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
    
    - name: Install CMake
      uses: lukka/get-cmake@latest
    
    - name: Configure Neutron
      run: |
        cmake -B build -G "Visual Studio 17 2022" -A x64
    
    - name: Build Neutron
      run: |
        cmake --build build --config ${{ matrix.build_type }} -j $env:NUMBER_OF_PROCESSORS
    
    - name: Configure Box
      run: |
        cd nt-box
        cmake -B build -G "Visual Studio 17 2022" -A x64
    
    - name: Build Box
      run: |
        cd nt-box
        cmake --build build --config ${{ matrix.build_type }} -j $env:NUMBER_OF_PROCESSORS
    
    - name: Run tests
      run: |
        .\run_tests.ps1
    
    - name: Upload artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: neutron-windows-msvc
        path: |
          build/${{ matrix.build_type }}/neutron.exe
          nt-box/build/${{ matrix.build_type }}/box.exe
        retention-days: 7

  build-windows-mingw:
    name: Build on Windows (MINGW64)
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Release, Debug]
    defaults:
      run:
        shell: msys2 {0}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          make
    
    - name: Configure Neutron
      run: |
        cmake -B build -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build Neutron
      run: |
        cmake --build build --config ${{ matrix.build_type }} -j $(nproc)
    
    - name: Configure Box
      run: |
        cd nt-box
        cmake -B build -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build Box
      run: |
        cd nt-box
        cmake --build build --config ${{ matrix.build_type }} -j $(nproc)
    
    - name: Upload artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: neutron-windows-mingw64
        path: |
          build/neutron.exe
          nt-box/build/box.exe
        retention-days: 7

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format cppcheck
    
    - name: Check formatting (clang-format)
      run: |
        find src include nt-box/src nt-box/include -name "*.cpp" -o -name "*.h" | \
        xargs clang-format --dry-run --Werror
      continue-on-error: true
    
    - name: Static analysis (cppcheck)
      run: |
        cppcheck --enable=warning,style,performance,portability \
                 --error-exitcode=0 \
                 --inline-suppr \
                 -I include -I nt-box/include \
                 src/ nt-box/src/
      continue-on-error: true

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake lcov
    
    - name: Configure with coverage
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_CXX_FLAGS="--coverage" \
              -DCMAKE_C_FLAGS="--coverage"
    
    - name: Build
      run: cmake --build build -j $(nproc)
    
    - name: Run tests
      run: |
        chmod +x run_tests.sh
        ./run_tests.sh
    
    - name: Generate coverage report
      run: |
        lcov --directory build --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info
      continue-on-error: true

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows-msvc, build-windows-mingw]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.build-linux.result }}" != "success" ] || \
           [ "${{ needs.build-macos.result }}" != "success" ] || \
           [ "${{ needs.build-windows-msvc.result }}" != "success" ] || \
           [ "${{ needs.build-windows-mingw.result }}" != "success" ]; then
          echo "One or more builds failed"
          exit 1
        fi
        echo "All builds successful!"
